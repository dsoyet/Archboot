#!/bin/bash
_CACHEDIR="$1/var/cache/pacman/pkg"
_CLEANUP_CACHE=""
_CLEANUP_CONTAINER=""
_LINUX_FIRMWARE="linux-firmware"
_DIR=""
_PACMAN_AARCH64_CHROOT_SERVER="https://pkgbuild.com/~tpowa/archboot-helper/pacman-chroot-aarch64"
_PACMAN_AARCH64_CHROOT="pacman-aarch64-chroot-latest.tar.zst"

_usage () {
    echo "CREATE ARCHBOOT CONTAINER"
    echo "-----------------------------"
    echo "This will create an archboot container for an archboot image."
    echo "Usage: ${_BASENAME} <directory> <options>"
    echo " Options:"
    echo "  -cc    Cleanup container eg. remove manpages, includes ..."
    echo "  -cp    Cleanup container package cache"
    exit 0
}

_parameters() {
    while [ $# -gt 0 ]; do
        case ${1} in
            -cc|--cc) _CLEANUP_CONTAINER="1" ;;
            -cp|--cp) _CLEANUP_CACHE="1" ;;
        esac
        shift
    done
}

_clean_cache() {
    if [[ "${_CLEANUP_CACHE}" ==  "1" ]]; then
        # clean cache
        echo "Clean pacman cache in ${_DIR} ..."
        rm -r "${_DIR}"/var/cache/pacman
    fi
}

_aarch64_pacman_chroot() {
    echo "Downloading archlinuxarm pacman aarch64 chroot..."
    [[ -f pacman-aarch64-chroot-latest.tar.zst ]] || wget ${_PACMAN_AARCH64_CHROOT_SERVER}/${_PACMAN_AARCH64_CHROOT}{,.sig} >/dev/null 2>&1
    # verify dowload
    sleep 1
    gpg --verify "${_PACMAN_AARCH64_CHROOT}.sig" >/dev/null 2>&1 || exit 1
    bsdtar -C "${_DIR}" -xf "${_PACMAN_AARCH64_CHROOT}"
    echo "Removing installation tarball ..."
    rm ${_PACMAN_AARCH64_CHROOT}{,.sig}
    # update container to latest packages
    echo "Update container to latest packages..."
    systemd-nspawn -D "${_DIR}" pacman -Syu --noconfirm >/dev/null 2>&1
}
    
# clean container from not needed files
_clean_container() {
    if [[ "${_CLEANUP_CONTAINER}" ==  "1" ]]; then
        echo "Clean container, delete not needed files from ${_DIR} ..."
        rm -r "${_DIR}"/usr/include
        rm -r "${_DIR}"/usr/share/{aclocal,applications,audit,avahi,awk,bash-completion,cmake,common-lisp,cracklib,dhclient,dhcpcd,dict,dnsmasq,emacs,et,fish,gdb,gettext,gettext-0.21,glib-2.0,gnupg,graphite2,gtk-doc,iana-etc,icons,icu,iptables,keyutils,libalpm,libgpg-error,makepkg-template,misc,mkinitcpio,ncat,ntp,p11-kit,pixmaps,pkgconfig,readline,screen,smartmontools,ss,stoken,tabset,texinfo,vala,xml,xtables,zoneinfo-leaps,man,doc,info,perl5}
        rm -r "${_DIR}"/usr/lib/{audit,avahi,awk,bash,binfmt.d,cifs-utils,cmake,coreutils,cryptsetup,cups,dracut,e2fsprogs,engines-1.1,environment.d,gawk,getconf,gettext,girepository-1.0,glib-2.0,gnupg,gssproxy,guile,icu,itcl4.2.2,iwd,krb5,ldb,ldscripts,libnl,libproxy,named,ntfs-3g,openconnect,openssl-1.0,p11-kit,pcsc,perl5,pkcs11,pkgconfig,python3.10,rsync,samba,sasl2,siconv,sysctl.d,sysusers.d,tar,tcl8.6,tcl8,tdbc1.1.3,tdbcmysql1.1.3,tdbcodbc1.1.3,tdbcpostgres1.1.3,terminfo,texinfo,thread2.8.7,valgrind,xfsprogs,xplc-0.3.13,xtables}
    fi
}

# remove mkinitcpio hooks to speed up process, remove not needed initramdisks
_clean_mkinitcpio() {
    echo "Clean mkinitcpio from ${_DIR} ..."
    [[ -e "${_DIR}/usr/share/libalpm/hooks/60-mkinitcpio-remove.hook" ]] && rm "${_DIR}/usr/share/libalpm/hooks/60-mkinitcpio-remove.hook"
    [[ -e "${_DIR}/usr/share/libalpm/hooks/90-mkinitcpio-install.hook" ]] && rm "${_DIR}/usr/share/libalpm/hooks/90-mkinitcpio-install.hook"
    [[ -e "${_DIR}/boot/initramfs-linux.img" ]] && rm "${_DIR}/boot/initramfs-linux.img"
    [[ -e "${_DIR}/boot/initramfs-linux-fallback.img" ]] && rm "${_DIR}/boot/initramfs-linux-fallback.img"
}

_clean_locale() {
    [[ "${_SAVE_RAM}" ==  "1" ]] && (echo "Clean locale from ${_DIR} ..."; rm -r "${_DIR}"/usr/share/{i18n,locale})
}

_clean_archboot_cache() {
    # Clean cache on archboot environment
    grep -qw 'archboot' /etc/hostname && (echo "Cleaning archboot /var/cache/pacman/pkg ..."; rm -r /var/cache/pacman/pkg)
}

_prepare_pacman() {
    # prepare pacman dirs
    mkdir -p "${_DIR}/var/lib/pacman"
    mkdir -p "${_CACHEDIR}"
    [[ -e "${_DIR}/proc" ]] || mkdir -m 555 "${_DIR}/proc"
    [[ -e "${_DIR}/sys" ]] || mkdir -m 555 "${_DIR}/sys"
    [[ -e "${_DIR}/dev" ]] || mkdir -m 755 "${_DIR}/dev"
    # mount special filesystems to ${_DIR}
    echo "Mount special filesystems in ${_DIR} ..."
    mount proc "${_DIR}/proc" -t proc -o nosuid,noexec,nodev
    mount sys "${_DIR}/sys" -t sysfs -o nosuid,noexec,nodev,ro
    mount udev "${_DIR}/dev" -t devtmpfs -o mode=0755,nosuid
    mount devpts "${_DIR}/dev/pts" -t devpts -o mode=0620,gid=5,nosuid,noexec
    mount shm "${_DIR}/dev/shm" -t tmpfs -o mode=1777,nosuid,nodev
}

_change_pacman_conf() {
    # enable parallel downloads
    sed -i -e 's:^#ParallelDownloads:ParallelDownloads:g' "${_DIR}"/etc/pacman.conf
    # disable checkspace option in pacman.conf, to allow to install packages in environment
    sed -i -e 's:^CheckSpace:#CheckSpace:g' "${_DIR}"/etc/pacman.conf
}

# umount special filesystems
_umount_special() {
    echo "Umount special filesystems in to ${_DIR} ..."
    umount -R "${_DIR}/proc"
    umount -R "${_DIR}/sys"
    umount -R "${_DIR}/dev"
}

_install_base_packages() {
    echo "Installing packages base linux and ${_LINUX_FIRMWARE} to ${_DIR} ..."
    pacman --root "${_DIR}" -Sy base linux "${_LINUX_FIRMWARE}" --ignore systemd-resolvconf --noconfirm --cachedir "${_PWD}"/"${_CACHEDIR}" >/dev/null 2>&1
}

_install_archboot() {
    echo "Installing ${_ARCHBOOT} to ${_DIR} ..."
    pacman --root "${_DIR}" -Sy "${_ARCHBOOT}" --ignore systemd-resolvconf --noconfirm >/dev/null 2>&1
}

_aarch64_install_base_packages() {
    echo "Installing packages base linux and ${_LINUX_FIRMWARE} to ${_DIR} ..."
    systemd-nspawn -q -D "${_DIR}" /bin/bash -c "pacman -Sy base linux ${_LINUX_FIRMWARE} --ignore systemd-resolvconf --noconfirm" >/dev/null 2>&1
}

_aarch64_install_archboot() {
    echo "Installing ${_ARCHBOOT} to ${_DIR} ..."
    systemd-nspawn -q -D "${_DIR}" /bin/bash -c "pacman -Sy ${_ARCHBOOT} --ignore systemd-resolvconf --noconfirm" >/dev/null 2>&1
}


_copy_mirrorlist_and_pacman_conf() {
    # copy local mirrorlist to container
    echo "Create pacman config and mirrorlist in container..."
    cp "/etc/pacman.d/mirrorlist" "${_DIR}/etc/pacman.d/mirrorlist"
    # only copy from archboot pacman.conf, else use default file
    grep -qw 'archboot' /etc/hostname && cp /etc/pacman.conf "${_DIR}"/etc/pacman.conf
}

_set_hostname() {
    echo "Setting hostname to archboot ..."
    echo 'archboot' > "${_DIR}/etc/hostname"
}
