#!/usr/bin/env bash
# SPDX-License-Identifier: GPL-3.0-or-later
# Created by Tobias Powalowski <tpowa@archlinux.org>

_run ()
{
    _map _binary findssl.sh scp sftp ssh-add ssh-agent ssh-copy-id ssh-keygen ssh-keyscan sshd \
      exportfs nfsstat rpc.idmapd rpc.mountd rpc.nfsd rpc.statd rpcdebug showmount \
      sm-notify start-statd rpc.gssd nfsdcltrack gssproxy screen tmux rsync ttyd
    _map _file /etc/{screenrc,ssh/{ssh_config,/moduli},rsyncd.conf,exports,netconfig} \
          /usr/lib/ssh/{sftp-server,ssh-keysign,ssh-pkcs11-helper}
    _file_rename /etc/ssh/sshd_config /etc/ssh/sshd_config
    # allow root login and empty passwords
    echo "PermitRootLogin yes" >> "${_ROOTFS}/etc/ssh/sshd_config"
    echo "PermitEmptyPasswords yes" >> "${_ROOTFS}/etc/ssh/sshd_config"
    _full_dir /usr/lib/libnfsidmap
    _map _dir /var/lib/{nfs/{sm,sm.bak,v4recovery,rpc_pipefs},gssproxy/{clients,rcache}} \
              /var/log/gssproxy
    # mask nfs3 systemd
    for i in rpcbind.service rpcbind.socket rpcbind.target nfs-server.service; do
        _symlink "/etc/systemd/system/${i}" /dev/null
    done
    _map _full_dir /etc/{gss,gssproxy}
    # start sshd on startup
    _symlink /etc/systemd/system/multi-user.target.wants/sshd.service /usr/lib/systemd/system/sshd.service
    # start ttyd on startup
    _file /usr/lib/libwebsockets-evlib_uv.so
    _file_rename /usr/share/archboot/remote/usr/bin/remote-login.sh /usr/bin/remote-login.sh
    _file_rename /usr/share/archboot/remote/etc/systemd/system/ttyd.service /etc/systemd/system/ttyd.service
    _symlink /etc/systemd/system/default.target.wants/ttyd.service /etc/systemd/system/ttyd.service
    # fix licenses
    _map _file /usr/share/licenses/{nfsidmap/LICENSE,tmux/LICENSE,ttyd/LICENSE}
}

# vim: set ft=sh ts=4 sw=4 et:
