#!/usr/bin/bash
# SPDX-License-Identifier: GPL-2.0-only
# created by Tobias Powalowski <tpowa@archlinux.org>
_title() {
    echo -e "\e[1mInitializing\e[m \e[1;96mArchboot\e[m \e[1m- Arch Linux Environment:\e[m"
    echo -e "\e[1;93mPlease keep the medium inserted, until the following steps have fully finished! \e[m"
}
_emergency_shell() {
    echo -e "\e[1;91mArchboot Emergeny Shell:\e[m"
    echo -e "\e[1mSeems something went wrong...\e[m"
    echo -e "\e[1;93mType 'exit' or 'reboot' for reboot.\e[m"
    echo -e "\e[1;93mType 'poweroff' for poweroff.\e[m"
    /bin/bash
    echo b >/proc/sysrq-trigger
}
_udev_trigger() {
    udevadm trigger --action=add --type=subsystems
    udevadm trigger --action=add --type=devices
    udevadm settle
}
# mount kernel filesystems
mount -t proc proc /proc -o nosuid,noexec,nodev
mount -t sysfs sys /sys -o nosuid,noexec,nodev
mount -t devtmpfs dev /dev -o mode=0755,nosuid
mount -t tmpfs run /run -o nosuid,nodev,mode=0755
if [ -e /sys/firmware/efi ]; then
    mount -t efivarfs efivarfs /sys/firmware/efi/efivars -o nosuid,nodev,noexec
fi
echo archboot >/proc/sys/kernel/hostname
# initialize udev
kmod static-nodes --format=tmpfiles --output=/run/tmpfiles.d/kmod.conf
systemd-tmpfiles --prefix=/dev --create --boot
/usr/lib/systemd/systemd-udevd --daemon --resolve-names=never &>/dev/null
_udev_trigger
# not all devices trigger autoload!
modprobe -q cdrom
modprobe -q usb-storage
modprobe -q zram
modprobe -q zstd
echo 1 > /proc/sys/kernel/sysrq
_title
# it needs one echo before, in order to reset the consolefont!
setfont consolefont-16.psf.gz -C /dev/console
echo -e "\e[1mStep 1/6:\e[m Searching for archboot rootfs on usb/hd/cdrom device..."
echo -e "          Trying for 10 seconds /dev/sr0 and UUID=1234-ABCD..."
_COUNT=0
while true; do
    mount UUID=1234-ABCD /mnt &>/dev/null && break
    mount /dev/sr0 /cdrom &>/dev/null && break
    read -r -t 1
    _COUNT=$((_COUNT+1))
    [[ "${_COUNT}" == 10 ]] && break
done
if ! [[ -f "/mnt/boot/initramfs-$(uname -m).img" ]] ; then
    if ! mount /cdrom/efi.img /mnt &>/dev/null; then
        echo -e "\e[1;91mError: Didn't find a device with archboot rootfs! \e[m"
        echo -e "\e[1mThis needs further debugging. Please contact the archboot author.\e[m"
        echo -e "\e[1mTobias Powalowski: tpowa@archlinux.org\e[m"
        echo ""
        _emergency_shell
    fi
fi
cd /
# move in modules from main initramfs
echo -e "\e[1mStep 2/6:\e[m Copying and loading modules from initramfs-$(uname -m).img..."
echo -e "          This may need some time..."
bsdcpio -u -i "*/lib/modules/" "*/lib/firmware/" <"/mnt/boot/initramfs-$(uname -m).img" &>/dev/null || _emergency_shell
# reinitialize available modules
udevadm control -R
# clear screen
printf "\ec"
_udev_trigger
# shutdown udevd
udevadm control --exit
udevadm info --cleanup-db
FB_SIZE="$(cut -d 'x' -f 1 "$(find /sys -wholename '*fb0/modes')" | sed -e 's#.*:##g')"
if [[ "${FB_SIZE}" -gt '1900' ]]; then
    SIZE="32"
else
    SIZE="16"
fi
setfont consolefont-${SIZE}.psf.gz -C /dev/console
_title
echo -e "\e[1mStep 1/6:\e[m Searching for archboot rootfs on usb/hd/cdrom device..."
echo -e "          Trying for 10 seconds /dev/sr0 and UUID=1234-ABCD..."
echo -e "\e[1mStep 2/6:\e[m Copying and loading modules from initramfs-$(uname -m).img..."
echo -e "          This may need some time..."
echo -e "\e[1mStep 3/6:\e[m Removing firmware and modules..."
# cleanup firmware and modules
mv /lib/firmware/regulatory* /tmp/ &>/dev/null
rm -rf /lib/firmware/*
mv /tmp/regulatory* /lib/firmware/ &>/dev/null
rm -rf /lib/modules/*/kernel/drivers/{acpi,ata,gpu,bcma,block,bluetooth,hid,input,platform,net,scsi,soc,spi,usb,video}
rm -rf /lib/modules/*/extramodules
echo -e "\e[1mStep 4/6:\e[m Creating /dev/zram0 with zstd compression..."
echo "zstd" >/sys/block/zram0/comp_algorithm
echo "4G" >/sys/block/zram0/disksize
echo -e "\e[1mStep 5/6:\e[m Creating btrfs on /dev/zram0..."
mkfs.btrfs /dev/zram0 &>/dev/null
# use discard to get free RAM on delete!
mount -o discard /dev/zram0 /sysroot &>/dev/null
echo -e "\e[1mStep 6/6:\e[m Copying rootfs files to /sysroot..."
echo -e "          This may need some time..."
mkdir -p /sysroot/usr/lib
mv /lib/modules /sysroot/usr/lib
mv /lib/firmware /sysroot/usr/lib
cd /sysroot || _emergency_shell
bsdcpio -u -f "*/lib/modules/" -f "*/lib/firmware/" -i <"/mnt/boot/initramfs-$(uname -m).img" &>/dev/null || _emergency_shell
echo 0 > /proc/sys/kernel/sysrq
echo -e "\e[1;96mArchboot\e[m \e[1m- Arch Linux Environment finished.\e[m"
echo -e "\e[1;92mThe medium can be safely removed now! \e[m"
echo -e "\e[1mSystemd will take over in a second...\e[m"
read -r -t 3
# remove mkinitcpio files and directories
rm -rf /sysroot/{hooks,install,kernel,new_root,sysroot} &>/dev/null
rm -f /sysroot/{VERSION,config,buildconfig,init} &>/dev/null
# clear screen
printf "\ec"
exec switch_root /sysroot /usr/bin/init "$@"

# vim: set ft=sh ts=4 sw=4 et:
